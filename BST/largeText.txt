The most complex operation on a BST is removing a node. The complexity of node
removal depends on which node you want to delete. If you want to remove a node with
no children, the removal is fairly simple. If the node has just one child node, either left
or right, the removal is a little more complex to accomplish. The removal of a node with
two children is the most complex removal operation to perform.
To aid in managing the complexity of removal, we remove nodes from a BST recursively.
The two functions we will define are remove() and removeNode() .
The first step to take when removing a node from a BST is to check to see if the current
node holds the data we are trying to remove. If so, remove that node. If not, then we
compare the data in the current node to the data we are trying to remove. If the data we
want to remove is less than the data in the current node, move to the left child of the
current node and compare data. If the data we want to remove is greater than the data
in the current node, move to the right child of the current node and compare data.
The first case to consider is when the node to be removed is a leaf (a node with no
children). Then all we have to do is set the link that is pointing to the node of the parent
node to null .
When the node we want to remove has one child, then the the link that is pointing to
the node to be removed has to be adjusted to point to the removed node’s child node.
The most complex operation on a BST is removing a node. The complexity of node
removal depends on which node you want to delete. If you want to remove a node with
no children, the removal is fairly simple. If the node has just one child node, either left
or right, the removal is a little more complex to accomplish. The removal of a node with
two children is the most complex removal operation to perform.
To aid in managing the complexity of removal, we remove nodes from a BST recursively.
The two functions we will define are remove() and removeNode() .
The first step to take when removing a node from a BST is to check to see if the current
node holds the data we are trying to remove. If so, remove that node. If not, then we
compare the data in the current node to the data we are trying to remove. If the data we
want to remove is less than the data in the current node, move to the left child of the
current node and compare data. If the data we want to remove is greater than the data
in the current node, move to the right child of the current node and compare data.
The first case to consider is when the node to be removed is a leaf (a node with no
children). Then all we have to do is set the link that is pointing to the node of the parent
node to null .
When the node we want to remove has one child, then the the link that is pointing to
the node to be removed has to be adjusted to point to the removed node’s child node.
The most complex operation on a BST is removing a node. The complexity of node
removal depends on which node you want to delete. If you want to remove a node with
no children, the removal is fairly simple. If the node has just one child node, either left
or right, the removal is a little more complex to accomplish. The removal of a node with
two children is the most complex removal operation to perform.
To aid in managing the complexity of removal, we remove nodes from a BST recursively.
The two functions we will define are remove() and removeNode() .
The first step to take when removing a node from a BST is to check to see if the current
node holds the data we are trying to remove. If so, remove that node. If not, then we
compare the data in the current node to the data we are trying to remove. If the data we
want to remove is less than the data in the current node, move to the left child of the
current node and compare data. If the data we want to remove is greater than the data
in the current node, move to the right child of the current node and compare data.
The first case to consider is when the node to be removed is a leaf (a node with no
children). Then all we have to do is set the link that is pointing to the node of the parent
node to null .
When the node we want to remove has one child, then the the link that is pointing to
the node to be removed has to be adjusted to point to the removed node’s child node.
The most complex operation on a BST is removing a node. The complexity of node
removal depends on which node you want to delete. If you want to remove a node with
no children, the removal is fairly simple. If the node has just one child node, either left
or right, the removal is a little more complex to accomplish. The removal of a node with
two children is the most complex removal operation to perform.
To aid in managing the complexity of removal, we remove nodes from a BST recursively.
The two functions we will define are remove() and removeNode() .
The first step to take when removing a node from a BST is to check to see if the current
node holds the data we are trying to remove. If so, remove that node. If not, then we
compare the data in the current node to the data we are trying to remove. If the data we
want to remove is less than the data in the current node, move to the left child of the
current node and compare data. If the data we want to remove is greater than the data
in the current node, move to the right child of the current node and compare data.
The first case to consider is when the node to be removed is a leaf (a node with no
children). Then all we have to do is set the link that is pointing to the node of the parent
node to null .
When the node we want to remove has one child, then the the link that is pointing to
the node to be removed has to be adjusted to point to the removed node’s child node.
